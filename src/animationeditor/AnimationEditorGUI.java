package animationeditor;

import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.yaml.snakeyaml.Yaml;

public class AnimationEditorGUI extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public AnimationEditorGUI() {
        initComponents();
        updateTree();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        boneTree = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        btnAddBone = new javax.swing.JButton();
        btnRemoveBone = new javax.swing.JButton();
        btnSetParent = new javax.swing.JButton();
        btnResetParent = new javax.swing.JButton();
        btnRenameBone = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        animationFrame = new javax.swing.JInternalFrame();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        btnSaveSkeleton = new javax.swing.JMenuItem();
        btnLoadSkeleton = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(boneTree);

        btnAddBone.setText("Add Bone");
        btnAddBone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBoneActionPerformed(evt);
            }
        });

        btnRemoveBone.setText("Remove Bone");
        btnRemoveBone.setName(""); // NOI18N
        btnRemoveBone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveBoneActionPerformed(evt);
            }
        });

        btnSetParent.setText("Set Parent");
        btnSetParent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetParentActionPerformed(evt);
            }
        });

        btnResetParent.setText("Reset Parent");
        btnResetParent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetParentActionPerformed(evt);
            }
        });

        btnRenameBone.setText("Rename bone");
        btnRenameBone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenameBoneActionPerformed(evt);
            }
        });

        jButton1.setText("Rotate Bone");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnRenameBone)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddBone)
                            .addComponent(btnSetParent))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnResetParent, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnRemoveBone, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddBone)
                    .addComponent(btnRemoveBone))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSetParent)
                    .addComponent(btnResetParent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRenameBone)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        animationFrame.setVisible(true);

        javax.swing.GroupLayout animationFrameLayout = new javax.swing.GroupLayout(animationFrame.getContentPane());
        animationFrame.getContentPane().setLayout(animationFrameLayout);
        animationFrameLayout.setHorizontalGroup(
            animationFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 338, Short.MAX_VALUE)
        );
        animationFrameLayout.setVerticalGroup(
            animationFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jMenu1.setText("File");

        btnSaveSkeleton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        btnSaveSkeleton.setText("Save Skeleton");
        btnSaveSkeleton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveSkeletonActionPerformed(evt);
            }
        });
        jMenu1.add(btnSaveSkeleton);

        btnLoadSkeleton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        btnLoadSkeleton.setText("Load Skeleton");
        btnLoadSkeleton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadSkeletonActionPerformed(evt);
            }
        });
        jMenu1.add(btnLoadSkeleton);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(animationFrame)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(animationFrame)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddBoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBoneActionPerformed
        String boneName = "Bone 0";

        for (int i = 0; Skeleton.getBone(boneName) != null; i++) {
            boneName = "Bone " + i;
        }

        Bone bone = new Bone(boneName, 0, 0, 0, 0);
        Skeleton.boneList.add(bone);

        updateTree();
    }//GEN-LAST:event_btnAddBoneActionPerformed

    private void btnRemoveBoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveBoneActionPerformed
        Bone bone = getSelectedBone();

        if (bone != null) {
            Skeleton.removeBone(bone.name);
            updateTree();
        }
    }//GEN-LAST:event_btnRemoveBoneActionPerformed

    private void btnSetParentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetParentActionPerformed
        Bone child = getSelectedBone();

        if (child != null) {
            String parentName = JOptionPane.showInputDialog("Enter Parent Name:");
            Bone parent = Skeleton.getBone(parentName);

            if (parentName != null) {
                if (parent == null) {
                    JOptionPane.showMessageDialog(null,
                            "Error: Could not find Bone with name \"" + parentName + "\"!");
                } else if (parent.name.equals(child.name)) {
                    JOptionPane.showMessageDialog(null, "Error: A Bone cannot be it's own parent!");
                } else if (child.getDescendant(parentName) != null) {
                    JOptionPane.showMessageDialog(null, "Error: Parent cannot be descendant of child!");
                } else {
                    Skeleton.removeBone(child.name);

                    parent.childList.add(child);
                    updateTree();
                }
            }
        }
    }//GEN-LAST:event_btnSetParentActionPerformed

    private void btnResetParentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetParentActionPerformed
        Bone bone = getSelectedBone();

        if (bone != null) {
            Skeleton.removeBone(bone.name);
            Skeleton.boneList.add(bone);
            updateTree();
        }
    }//GEN-LAST:event_btnResetParentActionPerformed

    private void btnSaveSkeletonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveSkeletonActionPerformed
        try (FileWriter fileWriter = new FileWriter("test.skeleton")) {
            try (BufferedWriter bufferedWriter = new BufferedWriter(fileWriter)) {

                ArrayList<HashMap> boneList = Skeleton.getBoneList();
                Yaml yaml = new Yaml();

                bufferedWriter.write(yaml.dump(boneList));

                bufferedWriter.close();
                fileWriter.close();
            }
        } catch (IOException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_btnSaveSkeletonActionPerformed

    private void btnLoadSkeletonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadSkeletonActionPerformed
        try (FileReader fileReader = new FileReader("test.skeleton")) {
            Yaml yaml = new Yaml();
            ArrayList<HashMap> fileList = (ArrayList<HashMap>) yaml.load(fileReader);
            Skeleton.setBoneList(fileList);
            updateTree();

        } catch (IOException e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_btnLoadSkeletonActionPerformed

    private void btnRenameBoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRenameBoneActionPerformed
        Bone bone = getSelectedBone();

        if (bone != null) {
            String newName = JOptionPane.showInputDialog("Enter New Name:");

            if (Skeleton.getBone(newName) == null) {
                bone.name = newName;
            }

            updateTree();
        }
    }//GEN-LAST:event_btnRenameBoneActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Bone bone = getSelectedBone();

        if (bone != null) {
            String input = JOptionPane.showInputDialog("Enter New Direction (Degrees):");
            try {
                int newDirection = Integer.parseInt(input);
                bone.setDirection(newDirection);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Error: Invalid Input!");
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnimationEditorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnimationEditorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnimationEditorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnimationEditorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new AnimationEditorGUI().setVisible(true);
            }
        });
    }

    private void updateTree() {
        DefaultTreeModel model = (DefaultTreeModel) boneTree.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();

        root.removeAllChildren();

        for (Bone bone : Skeleton.boneList) {
            DefaultMutableTreeNode node = bone.getTreeBranch();
            root.add(node);
        }

        model.nodeStructureChanged(root);

        for (int i = 0; i < boneTree.getRowCount(); i++) {
            boneTree.expandRow(i);
        }
    }

    private Bone getSelectedBone() {
        if (boneTree.getLastSelectedPathComponent() != null) {
            String selectedBoneName = boneTree.getLastSelectedPathComponent().toString();
            Bone bone = Skeleton.getBone(selectedBoneName);

            if (bone == null) {
                JOptionPane.showMessageDialog(null, "Error: No bone selected!");
            }

            return bone;
        }

        JOptionPane.showMessageDialog(null, "Error: No bone selected!");

        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JInternalFrame animationFrame;
    private javax.swing.JTree boneTree;
    private javax.swing.JButton btnAddBone;
    private javax.swing.JMenuItem btnLoadSkeleton;
    private javax.swing.JButton btnRemoveBone;
    private javax.swing.JButton btnRenameBone;
    private javax.swing.JButton btnResetParent;
    private javax.swing.JMenuItem btnSaveSkeleton;
    private javax.swing.JButton btnSetParent;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
